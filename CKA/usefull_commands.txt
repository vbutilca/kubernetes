####PODS########

#DEPLOY A RESOURCE FROM YAML
https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/
kubectl apply -f <filename.yaml>

#EDIT THE DEFINITION OF A DEPLOYED POD
kubectl edit pod redis       #opens up the yaml file for the pod, for instance we can change the image of the container, save and then the pod redeploys the container

#DEPLOY A POD
kubectl run <pod_name> --image <image_name>

# CREATE A TEMPLATE FOR A POD DEPLOYMENT USING THE kubectl run command with --dryrun
kubectl run <pod_name> --image <image_name> --dry-run=client -o yaml > pod_deployment.yaml

#EXPOSE THE APP in the pod ON A SPECIFIC POD PORT
kubectl run custom-nginx --image=nginx --port=8080


############ REPLICATION CONTROLLERS/ REPLICASET #############

#DEPLOY THE REPLICATION CONTROLLER FROM A TEMPLATE
kubectl create -f rc-definition.yaml

#SHOW REPLICATION CONTROLLERS
kubectl get replicationcontroller

#EDIT THE REPLICASET
kubectl replace -f replicaset-definition.yaml

#SCALE THE REPLICASET
kubectl scale --replicas=6 -f replicaset-definition.yaml
kubectl scale --replicas=6 replicaset <replicaset_name>

#SHOW REPLICASETS
kubectl get replicaset

#DELETE REPLICASETS
kubectl delete replicaset <replicaset_name>



########### DEPLOYMENTS #############

#CREATE COMMAND
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3

#DEPLOY THE deployment FROM A TEMPLATE
kubectl create -f deployment-definition.yaml

#SHOW REPLICATION CONTROLLERS
kubectl get deployments


########### SERVICES #############

#DEPLOY
kubectl create -f service-definition.yaml

#SHOW SERVICES
kubectl get services

#CREATE A NODEPORT SERVICE FOR POD nginx
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080

#CREATE A CLUSTER-IP SERVICE FOR POD redis
kubectl expose pod redis --port=6379 --name redis-service


# get Nodes in the cluster
kubectl get nodes

# get all that's running on the cluster
kubectl get all --all-namespaces

# get control plane components in the cluster
kubectl get all --namespace kube-system


# select pods by labels
kubectl get pods --selector app=App1

# select pods by multiple labels
kubectl get pods --selector env=prod,tier=frontend,bu=finance


# apply a taint on a node
kubectl taint nodes <node-name> key=value:taint-effect

#	-taint-effect reffers to what happens to Pods that DO NOT tolerate this taint
#	-we have 3 taint effects
#		NoSchedule - the pods are not sheduled on the Node
#		PreferNoSchedule - the system will try to avoid placing a pod on the Node
#		NoExecute - existing pods on the node will be evicted if they don't tolerate the taint

# verify applied taints on a node
kubectl describe node <node-name> | grep Taint

#remove taint from node by using the key
kubectl taint nodes <node-name> <key>-
kubectl taint nodes controlplane node-role.kubernetes.io/master-
